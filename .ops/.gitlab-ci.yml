stages:
  - build-package
  - build-image
  - deploy

variables:
  APP_NAME: "x1-community"
  APP_VERSION: "1.0"

  FRONTEND_PACKAGE_DIR: "dist"
  BACKEND_PACKAGE_NAME: "${APP_NAME}-backend-${APP_VERSION}-SNAPSHOT.jar"

  FRONTEND_IMAGE_NAME: "registry.talos.basic.ai/basicai/${APP_NAME}/frontend"
  BACKEND_IMAGE_NAME: "registry.talos.basic.ai/basicai/${APP_NAME}/backend"

  KUBERNETES_NAMESPACE: "x1-community"

build-frontend-package:
  stage: build-package
  tags:
    - nodejs-16
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG =~ /^v/
      changes:
        - .ops/**
        - frontend/**
  script:
    - cd frontend
    - yarn
    - yarn build:$CI_COMMIT_BRANCH
  artifacts:
    paths:
      - frontend/$FRONTEND_PACKAGE_DIR
  cache:
    paths:
      - frontend/node_modules

build-backend-package:
  stage: build-package
  tags:
    - openjdk-11
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG =~ /^v/
      changes:
        - .ops/**
        - backend/**
  variables:
    MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/backend/.m2/repository"
    MAVEN_ARGS: "--batch-mode"
  script:
    - cd backend
    - mvn $MAVEN_ARGS package
  artifacts:
    paths:
      - backend/target/*.jar
  cache:
    paths:
      - backend/.m2/repository

.build-image:
  stage: build-image
  tags:
    - docker
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - docker:20-dind
  before_script:
    - until docker info; do sleep 1; done
    - echo "$BASICAI_REGISTRY_PASS" | docker login $BASICAI_REGISTRY --username $BASICAI_REGISTRY_USER --password-stdin
  after_script:
    - docker pull $IMAGE_NAME:latest || true
    - docker build --cache-from $IMAGE_NAME:latest -t $IMAGE_NAME:$CI_COMMIT_REF_NAME -t $IMAGE_NAME:$CI_COMMIT_SHORT_SHA -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$CI_COMMIT_REF_NAME
    - docker push $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $IMAGE_NAME:latest

build-frontend-image:
  extends: .build-image
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG =~ /^v/
      changes:
        - .ops/**
        - frontend/**
  variables:
    IMAGE_NAME: $FRONTEND_IMAGE_NAME
  script:
    - cd frontend
    - cp ../.ops/frontend.dockerfile ./Dockerfile
    - sed -i 's/$FRONTEND_PACKAGE_DIR/'"$FRONTEND_PACKAGE_DIR"'/g' Dockerfile

build-backend-image:
  extends: .build-image
  rules:
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG =~ /^v/
      changes:
        - .ops/**
        - backend/**
  variables:
    IMAGE_NAME: $BACKEND_IMAGE_NAME
  script:
    - cd backend
    - cp ../.ops/backend.dockerfile ./Dockerfile
    - sed -i 's/$BACKEND_PACKAGE_NAME/'"$BACKEND_PACKAGE_NAME"'/g' Dockerfile

.deploy:
  stage: deploy
  tags:
    - kubectl
  before_script:
    - cd .ops/$ENV
    - sed -i 's/$APP_NAME/'"$APP_NAME"'/g' deployment.yml
    - sed -i 's/$APP_VERSION/'"$APP_VERSION"'/g' deployment.yml
    - sed -i 's|$FRONTEND_IMAGE_NAME|'"$FRONTEND_IMAGE_NAME"'|g' deployment.yml
    - sed -i 's|$BACKEND_IMAGE_NAME|'"$BACKEND_IMAGE_NAME"'|g' deployment.yml
    - sed -i 's/$CI_COMMIT_SHORT_SHA/'"$CI_COMMIT_SHORT_SHA"'/g' deployment.yml

deploy-to-alidev:
  extends: .deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      changes:
        - .ops/**
        - frontend/**
        - backend/**
        - model/**
  variables:
    ENV: alidev
  script:
    - kubectl apply -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_ALIYUN_DEVELOPMENT

deploy-to-alitest:
  extends: .deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "test"
      changes:
        - .ops/**
        - frontend/**
        - backend/**
        - model/**
  variables:
    ENV: alitest
  script:
    - kubectl apply -f deployment.yml -n $KUBERNETES_NAMESPACE --kubeconfig=$KUBECONFIG_ALIYUN_TESTING
